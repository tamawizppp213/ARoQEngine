//////////////////////////////////////////////////////////////////////////////////
///             @file   IGeometry.hpp
///             @brief  Geometry interface. 
///             @author Toide Yutaro
///             @date   2023_01_09
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef PHYSICS_PLANE_GEOMETRY_HPP
#define PHYSICS_PLANE_GEOMETRY_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "../../Private/Include/IGeometry.hpp"
#include "GameUtility/Math/Include/GMVector.hpp"
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace physics::geometry
{
	/****************************************************************************
	*				  			  IGeometry
	*************************************************************************//**
	*  @class     IGeometry
	*  @brief     Geometry interface
	*****************************************************************************/
	class GeometryPlane : public IGeometry
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		bool IsValid() const override
		{
			return _geometryType == GeometryType::Plane;
		}

		/****************************************************************************
		**                Public Property
		*****************************************************************************/
		
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		GeometryPlane() : IGeometry(GeometryType::Plane) { assert(IsValid()); }

	protected:
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/

		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Property
		*****************************************************************************/
	};
}
#endif