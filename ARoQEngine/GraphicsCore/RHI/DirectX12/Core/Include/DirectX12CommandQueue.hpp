//////////////////////////////////////////////////////////////////////////////////
///  @file   DirectX12RHICommandQueue.hpp
///  @brief  コマンドリストによって貯められた描画コマンドをまとめてGPU側に送信します.(Execute関数) @n
///          また, コマンドキュー間のGPU側の同期も行うことが可能です (Wait, Signal) @n
///  @author Toide Yutaro
///  @date   2024_04_06
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef DIRECTX12_COMMAND_QUEUE_HPP
#define DIRECTX12_COMMAND_QUEUE_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GraphicsCore/RHI/InterfaceCore/Core/Include/RHICommandQueue.hpp"
#include "DirectX12Core.hpp"
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                              Class
//////////////////////////////////////////////////////////////////////////////////
namespace rhi::directX12
{
	/****************************************************************************
	*				  			RHICommandQueue
	*************************************************************************//**
	/* @class     RHICommandQueue
	*  @brief     コマンドリストによって貯められた描画コマンドをまとめてGPU側に送信します.(Execute関数) @n
	*             また, コマンドキュー間のGPU側の同期も行うことが可能です (Wait, Signal) @n
	*                                         |
	*              set signal value (t=1)     | wait (t=1)-> execute gpu commands
	*			  --------------------------------------> t
	*****************************************************************************/
	class RHICommandQueue : public rhi::core::RHICommandQueue
	{
	public:
		#pragma region Public Function
		/*!**********************************************************************
		*  @brief  他のコマンドキューとの実行順序を保証するため, ほかのコマンドキューの実行完了を待つ
		*************************************************************************/
		void Wait  (const gu::SharedPointer<core::RHIFence>& fence, const gu::uint64 value) override;
		
		/*----------------------------------------------------------------------
		*  @brief :  コマンドキューの実行が完了したら、フェンスの値（value）を更新する
		/*----------------------------------------------------------------------*/
		void Signal(const gu::SharedPointer<core::RHIFence>& fence, const gu::uint64 value) override;
		
		/*----------------------------------------------------------------------
		*  @brief :  コマンドリストの内容を実行する. 
		             通常はset graphics, compute, transfer commandlist。
		/*----------------------------------------------------------------------*/
		void Execute(const gu::DynamicArray<gu::SharedPointer<rhi::core::RHICommandList>>& commandLists) override;

		#pragma endregion

		#pragma region Public Member Variables
		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		CommandQueueComPtr GetCommandQueue() { return _commandQueue; }

		void SetName(const gu::tstring& name) override;

		/*----------------------------------------------------------------------
		*  @brief :  コマンドキュー中のGPUタイムスタンプをHz単位で返します.
		/*----------------------------------------------------------------------*/
		gu::uint64 GetTimestampFrequency() override;

		/*----------------------------------------------------------------------
		*  @brief : GPUとCPUの計測時間をMicroSeconds単位で取得します
		/*----------------------------------------------------------------------*/
		core::GPUTimingCalibrationTimestamp GetCalibrationTimestamp() override;

		#pragma endregion 

		#pragma region Public Constructor and Destructor
		/*! @brief デフォルトコンストラクタ*/
		RHICommandQueue() = default;
		
		/*! @brief デストラクタ*/
		~RHICommandQueue();
		
		/*! @brief デバイスとコマンドキューの種類を指定して作成するコンストラクタ*/
		explicit RHICommandQueue(const gu::SharedPointer<rhi::core::RHIDevice>& device, const core::CommandListType type, const gu::tstring& name);

		#pragma endregion 

	protected:
		#pragma region Protected Function
		
		#pragma endregion 
		
		#pragma region Protected Member Variables
		/*! @brief DirectX12で使用されるコマンドキューの生ポインタ*/
		CommandQueueComPtr _commandQueue = nullptr;
		#pragma endregion 	
	};
}
#endif