//////////////////////////////////////////////////////////////////////////////////
///             @file   DirectX12QueryAllocator.hpp
///             @brief  temp
///             @author toide
///             @date   2024/01/05 19:02:46
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef DIRECTX12_QUERY_ALLOCATOR_HPP
#define DIRECTX12_QUERY_ALLOCATOR_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GameUtility/Base/Include/GUClassUtility.hpp"
#include "GameUtility/Base/Include/GUType.hpp"
#include "GameUtility/Container/Include/GUQueue.hpp"
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////

namespace rhi::directX12
{
	/****************************************************************************
	*				  			   DirectX12QueryAllocator
	*************************************************************************//**
	*  @class     DirectX12QueryAllocator
	*  @brief     temp
	*****************************************************************************/
	class QueryAllocator : public gu::NonCopyable
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		/*----------------------------------------------------------------------
		*  @brief :  新しいクエリ配列のインデックスを発行します
		/*----------------------------------------------------------------------*/
		gu::uint32 IssueID();

		/*----------------------------------------------------------------------
		*  @brief :  IDを未使用状態に変更します
		/*----------------------------------------------------------------------*/
		void FreeID(const gu::uint32 id);

		/*----------------------------------------------------------------------
		*  @brief :  ヒープの中身は解放せず, そのままIDのみを初期状態に戻します
		/*----------------------------------------------------------------------*/
		void ResetID(const gu::uint32 offsetIndex = 0);

		/****************************************************************************
		**                Public Property
		*****************************************************************************/
		/*----------------------------------------------------------------------
		*  @brief :  現在のHeap領域の配列に対してどのインデックスに入っているかを返します.
		/*----------------------------------------------------------------------*/
		gu::uint32 GetCurrentID() const { return _currentID; }

		/*----------------------------------------------------------------------
		*  @brief :  最大のクエリを格納できる数を返します.
		/*----------------------------------------------------------------------*/
		gu::uint32 GetMaxQueryCount() const { return _maxQueryCount; }

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		QueryAllocator() = default;

		QueryAllocator(const gu::uint32 maxQueryCount);

	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Property
		*****************************************************************************/
		/*----------------------------------------------------------------------
		*  @brief :  現在のHeap領域の配列に対してどのインデックスに入っているか
		/*----------------------------------------------------------------------*/
		gu::uint32 _currentID = INVALID_ID;

		/*----------------------------------------------------------------------
		*  @brief :  一度使ったIDをもう一度格納するときのインデックス
		/*----------------------------------------------------------------------*/
		gu::Queue<gu::uint32> _availableID = {};

		/*----------------------------------------------------------------------
		*  @brief :  最大のクエリを格納できる数
		/*----------------------------------------------------------------------*/
		gu::uint32 _maxQueryCount = 0;

		static constexpr gu::uint32 INVALID_ID = static_cast<gu::uint32>(-1);
	};
}

#endif