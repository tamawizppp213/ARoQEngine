//////////////////////////////////////////////////////////////////////////////////
///             @file   DirectX12Fence.hpp
///             @brief  Fence
///             @author Toide Yutaro
///             @date   2022_06_23
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef DIRECTX12_MEMORY_HPP
#define DIRECTX12_MEMORY_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GraphicsCore/RHI/InterfaceCore/Core/Include/RHIMemory.hpp"
#include "DirectX12Core.hpp"
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                         Template Class
//////////////////////////////////////////////////////////////////////////////////
namespace rhi::directX12
{
	/****************************************************************************
	*				  			RHIFence
	****************************************************************************/
	/* @class     RHIFence
	*  @brief     CPU-GPU synchronization
	*****************************************************************************/
	class RHIMemory : public rhi::core::RHIMemory
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		
		/****************************************************************************
		**                Public Property
		*****************************************************************************/
		HeapComPtr GetHeap() const noexcept { return _heap; }

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		RHIMemory() = default;

		~RHIMemory() = default;

		explicit RHIMemory(
			const gu::SharedPointer<core::RHIDevice>& device, 
			const core::MemoryHeap heapType,
			const std::uint64_t size, 
			[[maybe_unused]]std::uint32_t typeBits);
	
	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/
		
		/****************************************************************************
		**                Protected Property
		*****************************************************************************/
		HeapComPtr _heap = nullptr;
	};
}
#endif