//////////////////////////////////////////////////////////////////////////////////
///  @file   CoreFileCommonState.hpp
///  @brief  temp
///  @author toide
///  @date   2024/05/05 17:56:02
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef CORE_FILE_COMMON_STATE_HPP
#define CORE_FILE_COMMON_STATE_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GameUtility/Base/Include/GUType.hpp"

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace platform::core::file
{
	/****************************************************************************
	*				  	     LinkType
	*************************************************************************//**
	/*  @brief    ファイルやフォルダ名へのリンク(参照)を行うための種類　
	*****************************************************************************/
	enum class LinkType : gu::int8
	{
		/// 未知のエラーです
		Unknown = -2,

		/// ファイルが存在しない
		NotExist = -1,

		/// 特にリンクを使用しているわけではないです. 
		Unused   = 0,

		/// 同じファイルに対する異なるパスを提供する方法です. 全てのリンクを削除しないとファイルを削除することは出来ません. ディレクトリには使用不可です.
		Hard     = 1,

		/// Windows特有のディレクトリへのリンク機能です. 絶対パスのみ使用可能でショートカットのように別の場所にあるフォルダへリダイレクトするために使用.@n
		/// 参照先の元ディレクトリが削除されるとアクセスが不可となります. (同一ドライブ内でのみリンクを作成可能)
		Junction = 2,

		/// 特定のファイルやディレクトリを指し示す別のファイルを作成し(複製ではない), それを通じて本体を参照できるようにする方式です.@n
		/// Junction同様, 参照先の元ディレクトリが削除されるとアクセスが不可となります. (異なるドライブ内でリンクを作成可能)
		/// 相対パスで作成したシンボリックリンクを別のフォルダに移動させると機能しなくなるため注意が必要
		Symbolic = 3, 
	};
}

#endif