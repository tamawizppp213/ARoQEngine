//////////////////////////////////////////////////////////////////////////////////
///  @file   JsonType.hpp
///  @brief  temp
///  @author toide
///  @date   2024/06/08 13:43:20
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef JSON_COMMON_HPP
#define JSON_COMMON_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GameUtility/Base/Include/GUType.hpp"
#include "GameUtility/Base/Include/GUEnumClassFlags.hpp"

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace gu::file::json
{
	/****************************************************************************
	*				  		JsonValueType
	****************************************************************************/
	/*  @brief 　Jsonの値の種類
	*****************************************************************************/
	enum class JsonValueType : gu::uint16
	{
		Null    = 0, //!< 未設定
		False   = 1, //!< false
		True    = 2, //!< true
		Object  = 3, //!< オブジェクト型
		Array   = 4, //!< 配列
		String  = 5, //!< 文字列
		Number  = 6
	};

	/****************************************************************************
	*				  		JsonToken
	****************************************************************************/
	/*  @brief 　Jsonのデータ区切りを見つけるためのToken
	*****************************************************************************/
	enum class JsonToken : gu::uint16
	{
		None		= 0, //!< 未設定
		CurlyOpen   = 1, //!< {
		CurlyClose  = 2, //!< }
		SquareOpen  = 3, //!< [
		SquareClose = 4, //!< ]
		Colon       = 5, //!< :
		Comma       = 6, //!< ,
		String      = 7, //!< 文字列

		// short value
		Number      = 8, //!< 数値
		True        = 9, //!< true
		False       = 10, //!< false
		Null        = 11  //!< null
	};

	/****************************************************************************
	*				  		JsonNotation
	****************************************************************************/
	/*  @brief 　Jsonのデータの意味の単位を示すNotation
	*****************************************************************************/
	enum class JsonNotation : gu::uint16
	{
		None        = 0, //!< 未設定
		ObjectStart = 1, //!< オブジェクトの開始
		ObjectEnd   = 2, //!< オブジェクトの終了
		ArrayStart  = 3, //!< 配列の開始
		ArrayEnd    = 4, //!< 配列の終了
		Boolean     = 5, //!< 真偽値
		String      = 6, //!< 文字列
		Number      = 7, //!< 数値
		Null        = 8, //!< null
		Error       = 9  //!< エラー
	};
}

#endif