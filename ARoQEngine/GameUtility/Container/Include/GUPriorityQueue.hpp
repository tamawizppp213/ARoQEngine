//////////////////////////////////////////////////////////////////////////////////
///             @file   GUPriorityQueue.hpp
///             @brief  優先度付きキュー
///                     (memsetが作れたら一部実装を変更)
///             @author toide
///             @date   2023/12/02 4:24:31
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GU_PRIORITY_QUEUE_HPP
#define GU_PRIORITY_QUEUE_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "../../Base/Include/GUType.hpp"

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace gu
{
	/****************************************************************************
	*				  			   GUPriorityQueue
	*************************************************************************//**
	*  @class     GUPriorityQueue
	*  @brief     現状は最小ヒープによる実装になっています. 
	*            PriorityKeyには大小関係を示すため, operator < は最低限必要となります.
	*****************************************************************************/
	template <class PriorityKey>
	class PriorityQueue
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		void Push();

		/*-------------------------------------------------------------------
		-         @brief : Resize the queue content
		---------------------------------------------------------------------*/
		void Resize(const uint32 capacity);

		/*-------------------------------------------------------------------
		-         @brief : Clear the queue content
		---------------------------------------------------------------------*/
		void Clear();

		/*-------------------------------------------------------------------
		-         @brief : Free the memory
		---------------------------------------------------------------------*/
		void Free();


		/****************************************************************************
		**                Public Property
		*****************************************************************************/
		__forceinline bool IsEmpty() const { return _heapSize == 0; }

		__forceinline uint32 Size() const { return _heapSize; }

		__forceinline uint32 Capacity() const { return _capacity; }

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		PriorityQueue() = default;

		PriorityQueue(const uint32 capacity);

		~PriorityQueue() { Free(); }

		PriorityQueue(const PriorityQueue&) = delete;
		
		void operator =(const PriorityQueue&) = delete;

		PriorityQueue(PriorityQueue&& other);

	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/
		void ResetInternal();

		/****************************************************************************
		**                Protected Property
		*****************************************************************************/
		// @brief : priorities
		PriorityKey* _keys = nullptr;

		// @brief : current number of elements in min heap
		uint32 _heapSize = 0;

		// @brief : maximum possible size of min heap
		uint32 _capacity = 0;
	};

}

#endif