//////////////////////////////////////////////////////////////////////////////////
///             @file   GUSortedMap.hpp
///             @brief  Keyの順序に従って並べられた赤黒木マップ
///                     std::mapの60パーセントの速度で検索できます. 
///             @author toide
///             @date   2024/02/25 0:00:11
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GU_SORTED_MAP_HPP
#define GU_SORTED_MAP_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GURedBlackTree.hpp"
#include "GUPair.hpp"

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace gu
{
	/****************************************************************************
	*				  			   GUSortedMap
	*************************************************************************//**
	*  @class     GUSortedMap
	*  @brief     Keyの順序に従って並べられた赤黒木マップ
	*****************************************************************************/
	template<class Key, class Value>
	class SortedMap
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		/*----------------------------------------------------------------------
		*  @brief : 要素を挿入する 
		/*----------------------------------------------------------------------*/
		__forceinline void Insert(const gu::Pair<Key, Value>& element) { _tree.Insert(element); }

		/*----------------------------------------------------------------------
		*  @brief : 全ての要素を削除する
		/*----------------------------------------------------------------------*/
		__forceinline void Clear() { return _tree.Clear(); }

		/*----------------------------------------------------------------------
		*  @brief : コンテナが空であるかどうかを調べる
		/*----------------------------------------------------------------------*/
		__forceinline bool Contains() const { return _tree.Contains(); }

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		/*----------------------------------------------------------------------
		*  @brief : コンテナが空であるかどうかを調べる
		/*----------------------------------------------------------------------*/
		__forceinline bool Empty() const { return _tree.Size() == 0; }

		/*----------------------------------------------------------------------
		*  @brief : 要素数を取得する
		/*----------------------------------------------------------------------*/
		__forceinline uint64 Size() const { return _tree.Size(); }

#pragma region Operator Function
		__forceinline Value& operator[](const Key& key)
		{
			gu::Pair<Key, Value> initPair(key);
			const auto pair = _tree.Search(initPair); // Valueは特に何もしない(別の方法を模索したいところ)
			if (pair)
			{
				return pair->Value;
			}
			else
			{
				initPair.Value = Value();
				return _tree.Insert(initPair)->Value.Value;
			}
		}

		__forceinline void operator=(const Value& value)
		{

		}
#pragma endregion Operator Function
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		SortedMap() = default;

		SortedMap(const SortedMap&) = delete;

		SortedMap& operator=(const SortedMap&) = delete;

		~SortedMap()
		{
			_tree.Clear();
		}
	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		// @brief : 辞書
		gu::RedBlackTree<gu::Pair<Key, Value>> _tree;
	};
}

#endif