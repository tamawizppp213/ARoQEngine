//////////////////////////////////////////////////////////////////////////////////
///             @file   GUStack.hpp
///             @brief  stack
///                     リスト構造を使った実装です.
/// 　　　　　　　　　　　　　バッファベースのものはdequeを使用してください
///                     ランダムアクセスは不可です
///             @author toide
///             @date   2023/11/06 0:17:31
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GU_STACK_HPP
#define GU_STACK_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GameUtility/Base/Include/ClassUtility.hpp"

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////

namespace gu
{
	/****************************************************************************
	*				  			   GUStack
	*************************************************************************//**
	*  @class     GUStack
	*  @brief     リスト構造を使った実装です.
　　　　　　　　　　　　バッファベースのものはdequeを使用してください
	*****************************************************************************/
	template<class ElementType>
	class Stack : public NonCopyable
	{
	private:
		struct Node
		{
			Node* Next;
			ElementType Element;

			Node() : Next(nullptr) {};
			explicit Node(const ElementType& element) : Next(nullptr), Element(element) {};
			explicit Node(const ElementType&& element) : Next(nullptr), Element(element) {};
		};
	public:
		/*-------------------------------------------------------------------
		-           @brief : Add the element to the queue head.
		---------------------------------------------------------------------*/
		bool Push(const ElementType& element);
		bool Push(const ElementType&& element);

		/*-------------------------------------------------------------------
		-           @brief : Remove the element to the queue tail.
		---------------------------------------------------------------------*/
		bool Pop();

		/*-------------------------------------------------------------------
		-           @brief : Clear the all queue
		---------------------------------------------------------------------*/
		inline void Clear() { while (Pop()); }

		/*-------------------------------------------------------------------
		-           @brief : return the queue back (=_head) element
		---------------------------------------------------------------------*/
		inline       ElementType& Top() { return _head->Element; }
		inline const ElementType& Top() const { return _head->Element; }

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		inline bool IsEmpty() const { return _stackSize <= 0; }

		/*-------------------------------------------------------------------
		-           @brief : return the queue size
		---------------------------------------------------------------------*/
		inline int Size() { return _stackSize; }

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		Stack() : _head(nullptr){};

		~Stack()
		{
			Clear();
		}
	private:
		/****************************************************************************
		**                Private Function
		*****************************************************************************/

		/****************************************************************************
		**                Private Member Variables
		*****************************************************************************/
		Node* _head = nullptr; // 入れる場所の先頭ノード
		int _stackSize = 0;
	};

	/*-------------------------------------------------------------------
	-           @brief : スタックの先頭に要素を追加します.
	---------------------------------------------------------------------*/
	template<class ElementType>
	bool Stack<ElementType>::Push(const ElementType& element)
	{
		Node* newNode = new Node(element);

		if (newNode == nullptr) { return false; }

		/*-------------------------------------------------------------------
		-           Push処理の実装
		---------------------------------------------------------------------*/
		Node* oldHead = _head;
		_head = newNode;
		_head->Next = oldHead;

		_stackSize++;

	}

	/*-------------------------------------------------------------------
	-           @brief : スタックの先頭に要素を追加します.
	---------------------------------------------------------------------*/
	template<class ElementType>
	bool Stack<ElementType>::Push(const ElementType&& element)
	{
		Node* newNode = new Node(element);

		if (newNode == nullptr) { return false; }

		/*-------------------------------------------------------------------
		-           Push処理の実装
		---------------------------------------------------------------------*/
		Node* oldHead = _head;
		_head = newNode;
		_head->Next = oldHead;

		_stackSize++;

	}

	/*-------------------------------------------------------------------
	-           @brief : スタックの終端の要素を削除します
	---------------------------------------------------------------------*/
	template<class ElementType>
	bool Stack<ElementType>::Pop()
	{
		if (_head == nullptr) { return false; }

		/*-------------------------------------------------------------------
		-           pop処理の実装
		---------------------------------------------------------------------*/
		Node* oldTail = _head;
		Node* popNode = _head->Next;
		_head = popNode;

		/*-------------------------------------------------------------------
		-           要素の削除
		---------------------------------------------------------------------*/
		delete oldTail;
		_stackSize--;
		return true;
	}
}

#endif