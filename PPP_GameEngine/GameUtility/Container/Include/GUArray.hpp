//////////////////////////////////////////////////////////////////////////////////
///             @file   GUArray.hpp
///             @brief  未実装
///             @author toide
///             @date   2023/11/25 14:04:42
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GU_ARRAY_HPP
#define GU_ARRAY_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GameUtility/Base/Include/GUType.hpp"
#include "GameUtility/Base/Include/GUAssert.hpp"

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////

namespace gu
{

	/****************************************************************************
	*				  			   GUArray
	*************************************************************************//**
	*  @class     GUArray
	*  @brief     temp
	*****************************************************************************/
	template<class ElementType>
	class Array
	{
	public:
		using SizeType = size_t;

		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		/*----------------------------------------------------------------------
		*  @brief : ヒープ領域に格納されている先頭のポインタを返す
		/*----------------------------------------------------------------------*/
		__forceinline       ElementType* Data()       { return nullptr; }
		__forceinline const ElementType* Data() const { return nullptr; }

		/*----------------------------------------------------------------------
		*  @brief : 配列が空かどうか
		/*----------------------------------------------------------------------*/
		__forceinline bool IsEmpty() const { return _elementCount == 0; }

		/*----------------------------------------------------------------------
		*  @brief : 配列の要素数
		/*----------------------------------------------------------------------*/
		__forceinline SizeType Size() const { return _elementCount; }

		/*----------------------------------------------------------------------
		*  @brief : 配列に詰め込める最大要素数
		/*----------------------------------------------------------------------*/
		__forceinline SizeType Capacity() const { return _elementCapacity; }

		/*----------------------------------------------------------------------
		*  @brief : 要素のバイト数を返す
		/*----------------------------------------------------------------------*/
		__forceinline static constexpr uint32 ByteOfElement() { return sizeof(ElementType); }

		/*----------------------------------------------------------------------
		*  @brief : 配列に詰め込める残りの要素数を返す
		/*----------------------------------------------------------------------*/
		__forceinline SizeType SlackCount() const { return _elementCapacity - _elementCount; }

		/*----------------------------------------------------------------------
		*  @brief : 指定したIndexが領域内かどうか, 範囲外であっても途中で止めない
		/*----------------------------------------------------------------------*/
		__forceinline bool InRange(const SizeType index) const { return 0 <= index && index <= _elementCount; }

		/*----------------------------------------------------------------------
		*  @brief : 指定したIndexが領域内かどうか, 範囲外であったら途中で止める
		/*----------------------------------------------------------------------*/
		__forceinline void CheckRange(const SizeType index) const
		{
			Checkf(0 <= _elementCount && _elementCount <= _elementCapacity, "element count is out of range\n");
			Checkf(0 <= index && index <= _elementCount, "index is out of range. \n");
		}

#pragma region Operator Function
		__forceinline const ElementType& operator[](const SizeType index) const
		{
			CheckRange();
			return Data()[index];
		}
#pragma endregion Operator Function
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		Array() : _elementCount(0), _elementCapacity(0) {};


	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		SizeType _elementCount    = 0;
		SizeType _elementCapacity = 0;

	private:
		/****************************************************************************
		**                Private Function
		*****************************************************************************/

		/****************************************************************************
		**                Private Member Variables
		*****************************************************************************/
	};
}

#endif