//////////////////////////////////////////////////////////////////////////////////
///             @file   GUMemory.hpp
///             @brief  string.hのラッパークラスです. 不要なincludeを減らしているため, 軽量です.
///             @author toide
///             @date   2023/12/02 23:07:20
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GU_MEMORY_HPP
#define GU_MEMORY_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "../../Base/Include/GUType.hpp"
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////

namespace gu
{
	/****************************************************************************
	*				  			   GUMemory
	*************************************************************************//**
	*  @class     GUMemory
	*  @brief     memory function wrapper
	*****************************************************************************/
	class Memory
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		/*---------------------------------------------------------------
			@brief :  指定した分だけメモリの初期化を行います.
		-----------------------------------------------------------------*/
		static void* Set(void* destination, const uint8 oneByteValue, const size_t byteLength);

		/*---------------------------------------------------------------
			@brief :  指定したバイト長だけゼロに初期化します.
		-----------------------------------------------------------------*/
		static void* Zero(void* destination, const size_t byteLength);

		/*---------------------------------------------------------------
			@brief :  指定した分だけメモリを移動します.
		-----------------------------------------------------------------*/
		static void* Move(void* destination, const void* source, const size_t byteLength);

		/*---------------------------------------------------------------
			@brief :  メモリを指定したバイト数分だけコピー
		-----------------------------------------------------------------*/
		static void* Copy(void* destination, const void* source, const size_t byteLength);

		/*---------------------------------------------------------------
			@brief :  文字を比較する (+) left > right, (0) left == right (-) left < right
		-----------------------------------------------------------------*/
		static int32 Compare(const void* left, const void* right, const size_t byteLength);

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		/*---------------------------------------------------------------
			@brief :  指定したバイトがゼロに設定されているか
		-----------------------------------------------------------------*/
		static bool IsZero(const void* pointer, const size_t byteLength);

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/

	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
	};
}

#endif