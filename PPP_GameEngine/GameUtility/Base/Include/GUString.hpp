//////////////////////////////////////////////////////////////////////////////////
///             @file   GUString.hpp
///             @brief  動的な文字列クラスです. std::stringと同等に扱えるクラス
///                     未実装
///             @author toide
///             @date   2023/11/08 0:50:57
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GU_STRING_HPP
#define GU_STRING_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GUType.hpp"
#include "ClassUtility.hpp"
#include <string>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////

namespace gu
{
	namespace details
	{
		/****************************************************************************
		*				  			   string
		*************************************************************************//**
		*  @class     string
		*  @brief     プリミティブな型であるという判断の下, 特例でgu::uint32のように小文字スタートで行うことにいたしました.
		*****************************************************************************/
		template<class ElementType>
		class StringBase : public Copyable
		{
		public:
			/****************************************************************************
			**                Public Function
			*****************************************************************************/

			/****************************************************************************
			**                Public Member Variables
			*****************************************************************************/
			inline bool IsEmpty() const { return false; }

			/****************************************************************************
			**                Constructor and Destructor
			*****************************************************************************/

		protected:
			/****************************************************************************
			**                Protected Function
			*****************************************************************************/

			/****************************************************************************
			**                Protected Member Variables
			*****************************************************************************/
		};

	}

	using string  = std::string;
	using wstring = std::wstring;
#if NEED_WIDE_CHAR
	using tstring = std::wstring;
#else 
	using tstring = std::u16string;
#endif
}

#endif