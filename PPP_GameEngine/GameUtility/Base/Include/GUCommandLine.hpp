//////////////////////////////////////////////////////////////////////////////////
///             @file   GUCommandLine.hpp
///             @brief  コマンドライン引数を保持しておくクラスです.
///                     コマンドラインはApplication実行中常に同じものを使用する(インスタンスごとに変わったりはしない)ことから, 
///                     実装は全てStaticで完結しています. 
///                     また, Parseを使用する場合は文字長に注意してください. むやみに増やすと遅くなります. (文字の比較が入るため)
/// 　　　　　　　　　　　　　最大文字数は16384です.
///             @author toide
///             @date   2024/03/01 1:50:25
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GU_COMMAND_LINE_HPP
#define GU_COMMAND_LINE_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GUType.hpp"
#include "GUString.hpp"
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace gu
{
	/****************************************************************************
	*				  			   GUCommandLine
	*************************************************************************//**
	*  @class     GUCommandLine
	*  @brief     temp
	*****************************************************************************/
	struct CommandLine final
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		/*----------------------------------------------------------------------
		*  @brief : コマンドラインを設定します
		/*----------------------------------------------------------------------*/
		void SetUp(const tchar* newCommandLine);

		/*----------------------------------------------------------------------
		*  @brief : コマンドラインを後ろに追加します
		/*----------------------------------------------------------------------*/
		static void Append(const tchar* appendString) 
		{
			Confirmf(_commandLine.Size() + tstring(appendString).Size() < MAX_COMMAND_LINE_LENGTH, "Over MAX_COMMAND_LINE_LENGTH Error");
			_commandLine.Append(appendString); 
		}

		/*----------------------------------------------------------------------
		*  @brief : コマンドラインの文字列の先頭ポインタを返します
		/*----------------------------------------------------------------------*/
		static void Reset() { _commandLine.ClearAll(); _hasInitialized = false; }

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		static constexpr uint32 MAX_COMMAND_LINE_LENGTH = 16384;

		/*----------------------------------------------------------------------
		*  @brief : コマンドラインの文字列自体を返します. ただし, コマンドラインの直接的な改変は出来ません.
		/*----------------------------------------------------------------------*/
		static const tstring& Get() { return _commandLine; }

		/*----------------------------------------------------------------------
		*  @brief : コマンドラインの文字列の先頭ポインタを返します
		/*----------------------------------------------------------------------*/
		static const tchar* CString() { return _hasInitialized ? _commandLine.CString() : nullptr; }

		/*----------------------------------------------------------------------
		*  @brief : 初期化されているかを調べます
		/*----------------------------------------------------------------------*/
		static bool HasInitialized() { return _hasInitialized; }

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/

	private:
		/****************************************************************************
		**                Private Function
		*****************************************************************************/

		/****************************************************************************
		**                Private Member Variables
		*****************************************************************************/
		static bool _hasInitialized;

		static tstring _commandLine;
	};
}

#endif