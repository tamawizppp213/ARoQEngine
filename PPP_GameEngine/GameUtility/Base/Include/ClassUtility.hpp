//////////////////////////////////////////////////////////////////////////////////
///             @file   ClassUtility.hpp
///             @brief  Noncopyable
///             @author Toide Yutaro
///             @date   2022_06_21
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef CLASS_UTILITY_HPP
#define CLASS_UTILITY_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                         Template Class
//////////////////////////////////////////////////////////////////////////////////

/****************************************************************************
*				  			NonCopyable
*************************************************************************//**
*  @class     NonCopyable
*  @brief     Prohibit copy class
*****************************************************************************/
class NonCopyable
{
public:
	/****************************************************************************
	**                Public Function
	*****************************************************************************/

	/****************************************************************************
	**                Public Member Variables
	*****************************************************************************/
	

	/****************************************************************************
	**                Constructor and Destructor
	*****************************************************************************/
	NonCopyable() = default;
	virtual ~NonCopyable() = default;
	NonCopyable(const NonCopyable&)            = delete;
	NonCopyable& operator=(const NonCopyable&) = delete;
	NonCopyable(NonCopyable&&)        noexcept = default;
	NonCopyable& operator=(NonCopyable&&)      = default;
protected:
	/****************************************************************************
	**                Protected Function
	*****************************************************************************/

	/****************************************************************************
	**                Protected Member Variables
	*****************************************************************************/
};

#endif