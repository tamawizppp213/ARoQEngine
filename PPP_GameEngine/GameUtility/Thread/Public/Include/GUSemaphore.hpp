//////////////////////////////////////////////////////////////////////////////////
///             @file   GUSemaphore.hpp
///             @brief  複数スレッドでの同期を行うためのクラス
///             @author Toide Yutaro
///             @date   2023_09_30
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GU_SEMAPHORE_HPP
#define GU_SEMAPHORE_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GameUtility/Base/Include/GUClassUtility.hpp"
#include <cstdint>
#include <mutex>
#include <optional>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////

namespace gu
{
	/****************************************************************************
	*				  			  Semaphore
	*************************************************************************//**
	*  @class     Semaphore
	*  @brief     複数スレッドでの同期を行うためのクラス
	*****************************************************************************/
	class Semaphore : public NonCopyable
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		/* @brief : set the completed value and call something thread. */
		void Signal(const std::uint64_t value);

		/* @brief : wait the thread until the value exceeds the completed value*/
		void Wait(const std::uint64_t value, const std::optional<int> timeoutMilliSeconds = std::nullopt);

		/* @brief : return the desired completed value = wait value*/
		std::uint64_t GetCompletedValue() const { return _completedValue; }

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/

	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		std::uint64_t _completedValue = 0;

		// 変数やデータ構造に対する複数スレッドからの同時アクセスを抑止するためのクラス.
		std::mutex _lockMutex = {};

		std::condition_variable _conditionVariable = {};
	};
}


#endif