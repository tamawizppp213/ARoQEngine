//////////////////////////////////////////////////////////////////////////////////
///             @file   IPAddress.hpp
///             @brief  IPAddress
///             @author Toide Yutaro
///             @date   2022_12_05
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef IPADDRESS_HPP
#define IPADDRESS_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include <string>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace gc
{
	enum class UniqueIPAddressType
	{
		None,
		Any, 
		BroadCast,
		LoopBack
	};
	/****************************************************************************
	*				  			 NetworkError
	*************************************************************************//**
	*  @class     Tra
	*  @brief     TCP Connection Class (Winsock (windows only))
	*****************************************************************************/
	class IPAddress
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		static IPAddress GetUniqueIPAddress(const UniqueIPAddressType type);

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		std::uint64_t Get() const { return _ipAddress; }
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		IPAddress(const std::string& ipAddress);
		IPAddress(const std::uint64_t ipAddress);
	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		std::uint64_t _ipAddress = 0;
	};
}
#endif