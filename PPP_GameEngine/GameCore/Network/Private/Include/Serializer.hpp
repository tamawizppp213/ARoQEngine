//////////////////////////////////////////////////////////////////////////////////
///             @file   Serializer.hpp
///             @brief  Serialize
///             @author Toide Yutaro
///             @date   2022_12_05
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef SERIALIZER_HPP
#define SERIALIZER_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "NetworkDefine.hpp"
#include <stdint.h>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace gc
{
	
	/****************************************************************************
	*				  			 Serializer
	*************************************************************************//**
	*  @class     Serializer
	*  @brief     serialize data 
	*****************************************************************************/
	class Serializer
	{

	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		/* @brief : Serialize */
		template<typename T> bool Serialize(const T element)
		{
			return true;
		}
		
		/* @brief : Deserialize*/
		template<typename T> bool Deserialize(T& element)
		{
			return true;
		}

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		Endian GetEndian() const { return _endian; }
		
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		Serializer() = default;

		virtual ~Serializer()
		{
			
		}
	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/
		
		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		
	private:
		/****************************************************************************
		**                Private Member Variables
		*****************************************************************************/
		Endian _endian = Endian::BigEndian;
		
		uint64_t _offsetIndex = 0;
	};
}
#endif