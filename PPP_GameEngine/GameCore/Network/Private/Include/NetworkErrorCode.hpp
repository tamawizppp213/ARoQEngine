//////////////////////////////////////////////////////////////////////////////////
///             @file   Network error code.hpp
///             @brief  Network error code
///             @author Toide Yutaro
///             @date   2022_12_04
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef NETWORK_ERROR_CODE_HPP
#define NETWORK_ERROR_CODE_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include <WinSock2.h>
#include <string>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace gc
{

	/****************************************************************************
	*				  			 NetworkError
	*************************************************************************//**
	*  @class     Tra
	*  @brief     TCP Connection Class (Winsock (windows only))
	*****************************************************************************/
	class NetworkException
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		void Log(); // When error code is 0, this function returns immediately.
		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		NetworkException(const std::int32_t errorCode);
		
	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/
		
		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		std::int32_t _errorCode = 0;
		static constexpr std::int32_t INVALID_ID = -1;
		
	};
}
#endif