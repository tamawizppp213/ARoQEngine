//////////////////////////////////////////////////////////////////////////////////
///             @file   Physics Actor.hpp
///             @brief  Actor : all physics object 
///             @author Toide Yutaro
///             @date   2023_01_09
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef PHYSICS_ACTOR_HPP
#define PHYSICS_ACTOR_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
namespace physics::core
{
	enum class ActorType
	{
		RigidStatic,   // static rigid body
		RigidDynamic,  // dynamic rigid body

		CountOf,

	};
	/****************************************************************************
	*				  			  IGeometry
	*************************************************************************//**
	*  @class     IGeometry
	*  @brief     Geometry interface
	*****************************************************************************/
	class PhysicsActor
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		virtual ActorType GetActorType() const = 0;

		virtual const char* GetName() const = 0;

		virtual void SetName(const char* name) = 0;

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/


	protected:
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/

		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
	};
}
#endif