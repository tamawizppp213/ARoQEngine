//////////////////////////////////////////////////////////////////////////////////
///             @file   PPPEngine.hpp
///             @brief  Engine
///             @author Toide Yutaro
///             @date   2023_09_24
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef ENGINE_THREAD_MANAGER_HPP
#define ENGINE_THREAD_MANAGER_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GameUtility/Thread/Include/ThreadPool.hpp"
#include "GameUtility/Base/Include/ClassUtility.hpp"

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////

namespace engine::core
{
	enum class TaskTag
	{
		None   = 0x0000,
		Game   = 0x0001,
		Render = 0x0002,
	};

	/****************************************************************************
	*				  			    EngineThreadManager
	*************************************************************************//**
	*  @class     EngineThreadManager
	*  @brief     ゲームに使用するスレッドを管理するクラス.
	*****************************************************************************/
	class EngineThreadManager : public NonCopyable
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		EngineThreadManager() = default;

		virtual ~EngineThreadManager() = default;

	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		ThreadPool _threadPool = {};
	};
}
#endif