//////////////////////////////////////////////////////////////////////////////////
///             @file   RHIMultiGPUMask.hpp
///             @brief  GPU Mask : 1つのLoginal deviceで複数のGPUを扱うときに使用します.
///             @author toide
///             @date   2023/12/29 23:57:52
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef RHI_MULTI_GPU_MASK_HPP
#define RHI_MULTI_GPU_MASK_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GameUtility/Base/Include/GUType.hpp"
#include "Platform/Core/Include/CorePlatformMacros.hpp"
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////

namespace rhi::core
{
	/****************************************************************************
	*				  			   RHIMultiGPU
	*************************************************************************//**
	*  @class     RHIMultiGPU
	*  @brief     各ビットがGPUインデックスであるマスクです. 
	              SLIでないプラットフォームが常に1になるように最適化できるように、空にはできません
	*****************************************************************************/
	class RHIMultiGPUMask
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		/*----------------------------------------------------------------------
		*  @brief : Single GPUを使用します (node mask = 1)
		/*----------------------------------------------------------------------*/
		static const RHIMultiGPUMask SingleGPU() { return RHIMultiGPUMask(1); }

		/*----------------------------------------------------------------------
		*  @brief : 全てのGPUを使用します. 今は1で固定していますが, 必要に応じて変更します.
		/*----------------------------------------------------------------------*/
		static const RHIMultiGPUMask AllGPU() { return RHIMultiGPUMask(1); }

		/*----------------------------------------------------------------------
		*  @brief : 単一のGPUIndexを使ってRHIMultiGPUMaskを作成します
		*           (何桁目にどのGPUを与えたいか)
		/*----------------------------------------------------------------------*/
		static RHIMultiGPUMask CreateFromIndex(const gu::uint32 index) { return RHIMultiGPUMask(1 << index); }

		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
#if PLATFORM_DESKTOP 
		static constexpr gu::uint32 MAX_GPU_COUNT = 8;
#else
		static constexpr gu::int32 MAX_GPU_COUNT = 1;
#endif

		/*----------------------------------------------------------------------
		*  @brief : ビットマスクの値を取得します.
		/*----------------------------------------------------------------------*/
		__forceinline gu::uint32 GetMask() const { return _mask; }

		/*----------------------------------------------------------------------
		*  @brief : IDは一つだけ持っているか. (複数のビットマスクがオンになっていないか)
		/*----------------------------------------------------------------------*/
		bool HasSingleIndex() const;

		/*----------------------------------------------------------------------
		*  @brief : 指定したGPUのIDが含まれているか
		/*----------------------------------------------------------------------*/
		bool Contain(const gu::uint32 index) const { return (_mask & (1 << index)) != 0; }

		/*----------------------------------------------------------------------
		*  @brief : 指定したGPUMaskが全て含まれているか
		/*----------------------------------------------------------------------*/
		bool ContainAll(const RHIMultiGPUMask& mask) const { return (_mask & mask._mask) == mask._mask; }

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		RHIMultiGPUMask() : RHIMultiGPUMask(RHIMultiGPUMask::SingleGPU()) {};

		explicit RHIMultiGPUMask(const gu::uint32 gpuMask) : _mask(gpuMask) {};

		bool operator ==(const RHIMultiGPUMask& right) const { return _mask == right._mask; }
		bool operator !=(const RHIMultiGPUMask& right) const { return _mask != right._mask; }
		void operator |=(const RHIMultiGPUMask& right) { _mask |= right._mask; }
		void operator &=(const RHIMultiGPUMask& right) { _mask &= right._mask;}
	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/

		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		gu::uint32 _mask = 0;
	};

}
#endif