//////////////////////////////////////////////////////////////////////////////////
///             @file   DirectX12Shader.hpp
///             @brief  DirectX12 Compile Shader
///             @author Toide Yutaro
///             @date   2022_03_14
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef VULKAN_SHADER_HPP
#define VULKAN_SHADER_HPP
//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GraphicsCore/RHI/InterfaceCore/Core/Include/RHIShader.hpp"
#include <vulkan/vulkan.h>
#include <string>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                               Class
//////////////////////////////////////////////////////////////////////////////////
/****************************************************************************
*				  			    RHIShader
*************************************************************************//**
*  @class     RHIShader
*  @brief     Shader
*****************************************************************************/
namespace rhi::vulkan
{
	class RHIShader : public core::RHIShader
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		void Compile   (const std::wstring& fileName, const std::wstring& entryPoint, const std::wstring& target) override;
		void LoadBinary(const std::wstring& fileName) override;
		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		VkShaderModule GetShaderModule() const noexcept { return _shaderModule; }
		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		RHIShader() = default;
		~RHIShader();
		RHIShader(const std::shared_ptr<core::RHIDevice>& device) : core::RHIShader(device) {};
	protected:
		/****************************************************************************
		**                Private Function
		*****************************************************************************/

		/****************************************************************************
		**                Private Member Variables
		*****************************************************************************/
		VkShaderModule _shaderModule = nullptr;
	};
}

#endif