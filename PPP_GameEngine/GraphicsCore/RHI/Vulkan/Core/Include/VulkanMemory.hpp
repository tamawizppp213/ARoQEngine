//////////////////////////////////////////////////////////////////////////////////
///             @file   VulkanMemory.hpp
///             @brief  Heap memory
///             @author Toide Yutaro
///             @date   2023_02_21
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef VULKAN_MEMORY_HPP
#define VULKAN_MEMORY_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "GraphicsCore/RHI/InterfaceCore/Core/Include/RHIMemory.hpp"
#include <vulkan/vulkan.h>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                         Template Class
//////////////////////////////////////////////////////////////////////////////////
namespace rhi::vulkan
{
	/****************************************************************************
	*				  			RHIMemory
	*************************************************************************//**
	*  @class     RHIMemory
	*  @brief     memory
	*****************************************************************************/
	class RHIMemory : public rhi::core::RHIMemory
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		
		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/
		VkDeviceMemory GetMemory() const noexcept { return _memory; }

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/
		RHIMemory() = default;

		~RHIMemory() = default;

		explicit RHIMemory(
			const std::shared_ptr<core::RHIDevice>& device, 
			const core::MemoryHeap heapType,
			const std::uint64_t size, 
			std::uint32_t typeBits);
	
	protected:
		/****************************************************************************
		**                Protected Function
		*****************************************************************************/
		
		/****************************************************************************
		**                Protected Member Variables
		*****************************************************************************/
		VkDeviceMemory _memory = nullptr;
	};
}
#endif